{"version":3,"sources":["assets/imgs/star-wars-logo-yellow.png","utils/index.js","components/Header/Header.tsx","constants.js","components/FilterBar/FilterBar.tsx","components/PlanetCards/PlanetCards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","delayedMockFetch","ms","value","Promise","resolve","setTimeout","fetchData","setDataCallback","mockData","a","min","max","Math","ceil","floor","delay","random","data","Header","className","src","logo","alt","href","target","rel","FILTER_KEY","FilterBar","register","renderInputs","type","name","labels","defaultChecked","map","label","index","isCheckedByDefault","undefined","labelKebabCased","toLowerCase","replace","trim","key","id","ref","htmlFor","PlanetCards","appearancesGroupedByEra","appearances","media","appearancesByMedia","filter","appearance","prequelAppearances","era","originalAppearances","sequelAppearances","renderEraVisualizer","planet","renderSegments","eraModifier","split","getBriefDescription","description","modifiedDescription","substring","length","concat","renderAppearances","filmAppearances","tvAppearances","renderEntries","title","year","updatedTitle","includes","planets","this","props","Component","filterBySearchQuery","filters","searchQuery","filterByMyCanon","myCanon","reduce","acc","modifiedAppearances","startsWith","push","filterByMedia","mediaPlanetAppearedIn","titlesPlanetAppearedIn","some","filterByEra","needles","haystack","erasPlanetAppearedIn","needle","App","defaultValues","methods","useForm","watchAll","watch","Object","keys","useState","setData","useEffect","planetsData","newPlanetsArray","currentFilterFunction","filteredPlanets","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1cb6f52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-logo-yellow.9b7050e5.png\";","/**\n * Search to see if any of the items of array are in the haystack array.\n *\n * @param {array} needles - the array which has the items you are searching for\n * @param {array} haystack - the array that you are searching in\n * @return {boolean} true any of the items in arr are in the haystack\n */\nexport const includesAny = (needles, haystack) =>\n  needles.some(needle => haystack.includes(needle));\n\n/**\n * Search for substring in string.\n *\n * @param {string} substring - the substring that you are trying to find a match for\n * @param {string} string - the full string that you are searching\n * @return {boolean} true if the substring is a full or partial match\n */\nexport const search = (substring, string) => {\n  return string.toLowerCase().includes(substring.toLowerCase());\n};\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const delayedMockFetch = (ms, value) => {\n  return new Promise(resolve => setTimeout(resolve, ms, value));\n};\n\nexport const fetchData = async (setDataCallback, mockData) => {\n  const delay = getRandomIntInclusive(500, 1000);\n  const data = await delayedMockFetch(delay, mockData);\n\n  setDataCallback(data);\n};\n","import React from 'react';\n\nimport logo from 'assets/imgs/star-wars-logo-yellow.png';\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <img className=\"app-logo\" src={logo} alt=\"Star Wars\" />\n      <span className=\"image-attribution\">\n        Illustration by{' '}\n        <a\n          href=\"https://www.artstation.com/pabloolivera\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          Pablo Olivera\n        </a>\n      </span>\n    </header>\n  );\n}\n\nexport default Header;\n","export const FILTER_KEY = {\n  MEDIA: 'media',\n  ERA: 'era',\n  MY_CANON: 'myCanon'\n};\n","import React, { ReactElement } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FILTER_KEY } from '../../constants';\n\ninterface Input {\n  type: string;\n  name: string;\n  labels: string[];\n  defaultChecked?: number;\n}\n\ninterface FilterBarProps {\n  register: ReturnType<typeof useForm>['register'];\n}\n\nfunction FilterBar({ register }: FilterBarProps) {\n  const renderInputs = ({\n    type,\n    name,\n    labels,\n    defaultChecked\n  }: Input): ReactElement[] => {\n    return labels.map((label: string, index: number) => {\n      const isCheckedByDefault: boolean =\n        defaultChecked !== undefined ? defaultChecked === index : false;\n      const labelKebabCased: string = label\n        .toLowerCase()\n        .replace(/[^a-zA-Z']/gi, ' ')\n        .trim()\n        .replace(/\\s+/g, '-');\n\n      return (\n        <div\n          key={`filter-form-input-${index}`}\n          className=\"filter-form-input-wrapper\"\n        >\n          <input\n            type={type}\n            className=\"filter-form-input\"\n            id={`${name}-${labelKebabCased}`}\n            name={name}\n            value={label}\n            defaultChecked={isCheckedByDefault}\n            ref={register}\n          />\n          <label\n            className=\"filter-form-label\"\n            htmlFor={`${name}-${labelKebabCased}`}\n          >\n            {label}\n          </label>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <form className=\"filter-form\">\n      <input\n        type=\"text\"\n        name=\"searchQuery\"\n        className=\"search-form-input\"\n        ref={register}\n      />\n      <fieldset className=\"filter-form-fieldset\">\n        <h2 className=\"filter-form-heading\">\n          Media <em>(choose one)</em>\n        </h2>\n        {renderInputs({\n          type: 'radio',\n          name: FILTER_KEY.MEDIA,\n          labels: ['All', 'Film', 'Film (Episodes Only)', 'TV Series'],\n          defaultChecked: 0\n        })}\n      </fieldset>\n      <fieldset className=\"filter-form-fieldset\">\n        <h2 className=\"filter-form-heading\">Era</h2>\n        {renderInputs({\n          type: 'checkbox',\n          name: FILTER_KEY.ERA,\n          labels: ['Prequel Trilogy', 'Original Trilogy', 'Sequel Trilogy']\n        })}\n      </fieldset>\n      <fieldset className=\"filter-form-fieldset\">\n        <h2 className=\"filter-form-heading\">Canon</h2>\n        <div className=\"filter-form-input-wrapper\">\n          <input\n            type=\"checkbox\"\n            className=\"filter-form-input\"\n            id={FILTER_KEY.MY_CANON}\n            name={FILTER_KEY.MY_CANON}\n            ref={register}\n          />\n          <label className=\"filter-form-label\" htmlFor={FILTER_KEY.MY_CANON}>\n            My Canon\n          </label>\n        </div>\n      </fieldset>\n    </form>\n  );\n}\n\nexport default FilterBar;\n","import React, { Component, Fragment, ReactElement } from 'react';\nimport { Appearance, Planet } from '../../models/ui';\n\ninterface PlanetCardsProps {\n  planets: Planet[];\n}\n\nclass PlanetCards extends Component<PlanetCardsProps> {\n  appearancesGroupedByEra = (\n    appearances: Appearance[],\n    media?: string\n  ): Appearance[] => {\n    const appearancesByMedia = media\n      ? appearances.filter(appearance => appearance.media === media)\n      : appearances;\n\n    const prequelAppearances = appearancesByMedia.filter(\n      appearance => appearance.era === 'Prequel Trilogy'\n    );\n\n    const originalAppearances = appearancesByMedia.filter(\n      appearance => appearance.era === 'Original Trilogy'\n    );\n\n    const sequelAppearances = appearancesByMedia.filter(\n      appearance => appearance.era === 'Sequel Trilogy'\n    );\n\n    return [\n      ...prequelAppearances,\n      ...originalAppearances,\n      ...sequelAppearances\n    ];\n  };\n\n  renderEraVisualizer = (planet: Planet): ReactElement => {\n    const { appearances } = planet;\n\n    const renderSegments = this.appearancesGroupedByEra(appearances).map(\n      (appearance, index) => {\n        const eraModifier = appearance.era.split(' ')[0].toLowerCase();\n\n        return (\n          <div\n            key={`appearance-${index}`}\n            className={`planet-card-era-visualizer-segment planet-card-era-visualizer-segment--${eraModifier}`}\n          />\n        );\n      }\n    );\n\n    return <div className=\"planet-card-era-visualizer\">{renderSegments}</div>;\n  };\n\n  getBriefDescription = (description: string): string => {\n    const modifiedDescription = description.substring(0, 200);\n\n    return description.length > 200\n      ? modifiedDescription.concat('...')\n      : modifiedDescription;\n  };\n\n  renderAppearances = (planet: Planet): ReactElement => {\n    const { appearances } = planet;\n\n    const filmAppearances = this.appearancesGroupedByEra(appearances, 'Film');\n    const tvAppearances = this.appearancesGroupedByEra(\n      appearances,\n      'TV Series'\n    );\n\n    const renderEntries = (appearances: Appearance[]): ReactElement[] =>\n      appearances.map((appearance: Appearance, index: number) => {\n        const { title, year, media, era } = appearance;\n\n        const eraModifier = era.split(' ')[0].toLowerCase();\n        const updatedTitle =\n          title.includes('Clone Wars') && media === 'TV Series'\n            ? `${title} (${year})`\n            : title;\n\n        return (\n          <li\n            key={`appearance-${index}`}\n            className={`planet-card-appearances-list-item planet-card-appearances-list-item--${eraModifier}`}\n          >\n            {updatedTitle}\n          </li>\n        );\n      });\n\n    return (\n      <div className=\"planet-card-appearances\">\n        {filmAppearances.length ? (\n          <Fragment>\n            <h4 className=\"planet-card-appearances-heading\">Film</h4>\n            <ul className=\"planet-card-appearances-list\">\n              {renderEntries(filmAppearances)}\n            </ul>\n          </Fragment>\n        ) : null}\n        {tvAppearances.length ? (\n          <Fragment>\n            <h4 className=\"planet-card-appearances-heading\">TV</h4>\n            <ul className=\"planet-card-appearances-list\">\n              {renderEntries(tvAppearances)}\n            </ul>\n          </Fragment>\n        ) : null}\n      </div>\n    );\n  };\n\n  render() {\n    const { planets } = this.props;\n\n    if (!planets.length) {\n      return (\n        <div className=\"planet-cards planet-cards--no-data\">\n          <p className=\"planet-cards-no-data-message\">\n            Sorry, no planets match the filters you've selected.\n          </p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"planet-cards\">\n        {planets.map((planet: Planet, index: number) => (\n          <div key={`planet-${index}`} className=\"planet-card\">\n            {this.renderEraVisualizer(planet)}\n            <h3 className=\"planet-card-name\">{planet.name}</h3>\n            <p className=\"planet-card-description\">\n              {this.getBriefDescription(planet.description)}\n            </p>\n            {this.renderAppearances(planet)}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default PlanetCards;\n","import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { search, includesAny, fetchData } from './utils/index';\nimport { Appearance, Planet } from './models/ui';\n\nimport Header from './components/Header/Header';\nimport FilterBar from './components/FilterBar/FilterBar';\nimport PlanetCards from './components/PlanetCards/PlanetCards';\n\nimport planetsData from './planets.json';\n\ninterface Filters {\n  searchQuery: string;\n  media: string;\n  era: string[];\n  myCanon: boolean;\n}\n\nconst filterOutNonCanonAppearances = (\n  appearances: Appearance[]\n): Appearance[] =>\n  appearances.filter(\n    ({ title }) =>\n      title !== 'Star Wars: The Clone Wars' &&\n      title !== 'Star Wars Resistance' &&\n      !title.startsWith('Episode VII') &&\n      !title.startsWith('Episode VIII') &&\n      !title.startsWith('Episode IX')\n  );\n\nconst filterBySearchQuery = (planets: Planet[], filters: Filters): Planet[] => {\n  if (!filters.searchQuery.length) return planets;\n\n  return planets.filter(({ name }: Planet) =>\n    search(filters.searchQuery, name)\n  );\n};\n\nconst filterByMyCanon = (planets: Planet[], filters: Filters): Planet[] => {\n  if (!filters.myCanon) return planets;\n\n  return planets.reduce((acc: Planet[], planet: Planet) => {\n    const modifiedAppearances: Appearance[] = filterOutNonCanonAppearances(\n      planet.appearances\n    );\n\n    if (modifiedAppearances.length) {\n      acc.push({\n        ...planet,\n        appearances: modifiedAppearances\n      });\n    }\n\n    return acc;\n  }, []);\n};\n\nconst filterByMedia = (planets: Planet[], filters: Filters): Planet[] => {\n  if (filters.media === 'All') return planets;\n\n  return planets.filter((planet: Planet) => {\n    const { appearances } = planet;\n\n    const mediaPlanetAppearedIn: string[] = appearances.map(\n      ({ media }: Appearance) => media\n    );\n    const titlesPlanetAppearedIn: string[] = appearances.map(\n      ({ title }: Appearance) => title\n    );\n\n    return filters.media === 'Film (Episodes Only)'\n      ? mediaPlanetAppearedIn.includes('Film') &&\n          titlesPlanetAppearedIn.some(title => title.startsWith('Episode'))\n      : mediaPlanetAppearedIn.includes(filters.media);\n  });\n};\n\nconst filterByEra = (planets: Planet[], filters: Filters): Planet[] => {\n  if (!filters.era.length) return planets;\n\n  return planets.filter(({ appearances }: Planet) => {\n    const erasPlanetAppearedIn: string[] = appearances.map(\n      ({ era }: Appearance) => era\n    );\n\n    return includesAny(filters.era, erasPlanetAppearedIn);\n  });\n};\n\nconst filteredPlanets = (planets: Planet[], filters: Filters): Planet[] =>\n  [\n    filterBySearchQuery, //\n    filterByMyCanon,\n    filterByMedia,\n    filterByEra\n  ].reduce(\n    (newPlanetsArray: Planet[], currentFilterFunction: Function) =>\n      currentFilterFunction(newPlanetsArray, filters),\n    planets\n  );\n\nfunction App() {\n  // SETUP FILTERS AND FORM\n  const defaultValues: Filters = {\n    searchQuery: '',\n    media: 'All',\n    era: [],\n    myCanon: false\n  };\n\n  const methods = useForm({ defaultValues });\n\n  const watchAll = methods.watch() as Filters;\n  const filters: Filters = Object.keys(watchAll).length\n    ? watchAll\n    : defaultValues;\n\n  // SETUP DATA\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetchData(setData, planetsData);\n  }, []);\n\n  const planets: Planet[] = data.length ? filteredPlanets(data, filters) : data;\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <FilterBar {...methods} />\n      <PlanetCards planets={planets} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void,\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}