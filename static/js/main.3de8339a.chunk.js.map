{"version":3,"sources":["assets/imgs/star-wars-logo-yellow.png","constants.js","components/Header/Header.tsx","utils/index.js","components/FilterBar/FilterBar.tsx","components/PlanetCards/PlanetCard.tsx","components/Loader/Loader.tsx","components/PlanetCards/PlanetCards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FILTER_KEY","MEDIA","ALL","FILM","EPISODES","SPINOFFS","TV","ERA","PREQUEL","ORIGINAL","SEQUEL","Header","className","src","logo","alt","href","target","rel","overlap","needles","haystack","some","needle","includes","delayedMockFetch","ms","value","Promise","resolve","setTimeout","fetchData","setDataCallback","mockData","a","min","max","Math","ceil","floor","delay","random","data","FilterBar","register","renderInputs","type","name","labels","defaultChecked","map","label","index","formFieldId","toLowerCase","replace","trim","displayLabel","getDisplayLabel","subsetClass","key","id","ref","htmlFor","Object","values","appearancesSortedByEra","appearances","media","appearancesByMedia","filter","appearance","prequelAppearances","era","originalAppearances","sequelAppearances","PlanetCard","props","description","totalAppearances","length","appearancesAsPercents","reduce","acc","prequel","original","sequel","segments","entries","per","style","width","renderEraVisualizer","modifiedDescription","substring","concat","getBriefDescription","filmAppearances","tvAppearances","renderAppearance","title","year","eraModifier","split","updatedTitle","role","aria-label","renderAppearances","Loader","filterBySearchQuery","planets","filters","searchQuery","filterByMyCanon","myCanon","planet","modifiedAppearances","startsWith","push","filterByEra","eras","filterByMedia","crossReferenceByEras","array","filteredAppearances","Array","from","Set","erasOverlapFilters","PlanetCards","useState","initialPlanets","setInitialPlanets","filteredPlanets","newPlanetsArray","currentFilterFunction","useEffect","content","App","defaultValues","methods","useForm","watchAll","watch","keys","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3de8339a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-logo-yellow.9b7050e5.png\";","export const FILTER_KEY = {\n  MEDIA: 'media',\n  ERA: 'era',\n  MY_CANON: 'myCanon'\n};\n\nexport const MEDIA = {\n  ALL: 'All',\n  FILM: 'Film',\n  EPISODES: 'Episodes',\n  SPINOFFS: 'Spinoffs',\n  TV: 'TV Series'\n};\n\nexport const ERA = {\n  PREQUEL: 'Prequel',\n  ORIGINAL: 'Original',\n  SEQUEL: 'Sequel'\n};\n","import React from 'react';\n\nimport logo from 'assets/imgs/star-wars-logo-yellow.png';\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <img className=\"app-logo\" src={logo} alt=\"Star Wars\" />\n      <span className=\"image-attribution\">\n        Illustration by{' '}\n        <a\n          href=\"https://www.artstation.com/pabloolivera\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          Pablo Olivera\n        </a>\n      </span>\n    </header>\n  );\n}\n\nexport default Header;\n","export const unique = array => Array.from(new Set(array));\n\n/**\n * Search to see if any of the items of array1 are in array2.\n *\n * @param {array} needles - the array which has the items you are searching for\n * @param {array} haystack - the array that you are searching in\n * @return {boolean} true any of the items in array are in the haystack\n */\nexport const overlap = (needles, haystack) =>\n  needles.some(needle => haystack.includes(needle));\n\n/**\n * Search for substring in string.\n *\n * @param {string} substring - the substring that you are trying to find a match for\n * @param {string} string - the full string that you are searching\n * @return {boolean} true if the substring is a full or partial match\n */\nexport const search = (substring, string) => {\n  return string.toLowerCase().includes(substring.toLowerCase());\n};\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const delayedMockFetch = (ms, value) => {\n  return new Promise(resolve => setTimeout(resolve, ms, value));\n};\n\nexport const fetchData = async (setDataCallback, mockData) => {\n  // simulate a delay in loading of the data\n  const delay = getRandomIntInclusive(1000, 3000);\n  const data = await delayedMockFetch(delay, mockData);\n\n  setDataCallback(data);\n};\n\nexport const toKebabCase = string =>\n  string\n    .toLowerCase()\n    .replace(/[^a-zA-Z']/gi, ' ')\n    .trim()\n    .replace(/\\s+/g, '-');\n","import React, { ReactElement } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ERA, FILTER_KEY, MEDIA } from '../../constants';\nimport { toKebabCase } from '../../utils';\n\ninterface Input {\n  type: string;\n  name: string;\n  labels: string[];\n  defaultChecked?: number;\n}\n\ninterface FilterBarProps {\n  register: ReturnType<typeof useForm>['register'];\n}\n\nconst getDisplayLabel = (label: string) => {\n  if (label === MEDIA.ALL) return `${MEDIA.ALL} – 🎥 📺`;\n  if (label === MEDIA.FILM) return `${MEDIA.FILM} – 🎥`;\n  if (label === MEDIA.EPISODES) return `${MEDIA.EPISODES}`;\n  if (label === MEDIA.SPINOFFS) return `${MEDIA.SPINOFFS}`;\n  if (label === MEDIA.TV) return `${MEDIA.TV} – 📺`;\n\n  return label;\n}\n\nfunction FilterBar({ register }: FilterBarProps) {\n  const renderInputs = ({\n    type,\n    name,\n    labels,\n    defaultChecked\n  }: Input): ReactElement[] => labels.map((label: string, index: number) => {\n      const formFieldId: string = toKebabCase(label);\n      const displayLabel = getDisplayLabel(label)\n      const subsetClass = (label === MEDIA.EPISODES || label === MEDIA.SPINOFFS) ? 'filter-form__input-wrapper--subset' : '';\n\n      return (\n        <div\n          key={`filter-form__input-${index}`}\n          className={`filter-form__input-wrapper ${subsetClass}`}\n        >\n          <input\n            type={type}\n            className=\"filter-form__input\"\n            id={`${name}-${formFieldId}`}\n            name={name}\n            value={label}\n            ref={register}\n          />\n          <label\n            className=\"filter-form__label\"\n            htmlFor={`${name}-${formFieldId}`}\n          >\n            {displayLabel}\n          </label>\n        </div>\n      );\n    });\n\n  return (\n    <form className=\"filter-form\">\n      <input\n        type=\"text\"\n        name=\"searchQuery\"\n        className=\"search-form-input\"\n        ref={register}\n      />\n      <fieldset className=\"filter-form__fieldset\">\n        <h2 className=\"filter-form__heading\">\n          Media\n        </h2>\n        {renderInputs({\n          type: 'radio',\n          name: FILTER_KEY.MEDIA,\n          labels: [...Object.values(MEDIA)]\n        })}\n      </fieldset>\n      <fieldset className=\"filter-form__fieldset\">\n        <h2 className=\"filter-form__heading\">Era</h2>\n        {renderInputs({\n          type: 'checkbox',\n          name: FILTER_KEY.ERA,\n          labels: [...Object.values(ERA)]\n        })}\n      </fieldset>\n      <fieldset className=\"filter-form__fieldset\">\n        <h2 className=\"filter-form__heading\">Canon</h2>\n        <div className=\"filter-form__input-wrapper\">\n          <input\n            type=\"checkbox\"\n            className=\"filter-form__input\"\n            id={FILTER_KEY.MY_CANON}\n            name={FILTER_KEY.MY_CANON}\n            ref={register}\n          />\n          <label className=\"filter-form__label\" htmlFor={FILTER_KEY.MY_CANON}>\n            My Canon\n          </label>\n        </div>\n      </fieldset>\n    </form>\n  );\n}\n\nexport default FilterBar;\n","import React, { ReactElement } from 'react';\nimport { Appearance, Planet } from '../../models/ui';\nimport { ERA, MEDIA } from '../../constants';\n\ninterface AppearanceTally {\n  prequel: number;\n  original: number;\n  sequel: number;\n}\n\nconst appearancesSortedByEra = (\n  appearances: Appearance[],\n  media?: string\n): Appearance[] => {\n  const appearancesByMedia = media\n    ? appearances.filter(appearance => appearance.media === media)\n    : appearances;\n\n  const prequelAppearances = appearancesByMedia.filter(\n    appearance => appearance.era === ERA.PREQUEL\n  );\n\n  const originalAppearances = appearancesByMedia.filter(\n    appearance => appearance.era === ERA.ORIGINAL\n  );\n\n  const sequelAppearances = appearancesByMedia.filter(\n    appearance => appearance.era === ERA.SEQUEL\n  );\n\n  return [\n    ...prequelAppearances,\n    ...originalAppearances,\n    ...sequelAppearances\n  ];\n};\n\nconst renderEraVisualizer = (appearances: Appearance[]): ReactElement => {\n  const totalAppearances = appearances.length;\n\n  /**\n   * tally up all appearances by era\n   * on final item, convert tally to percents\n   */\n  const appearancesAsPercents = appearances.reduce((acc: AppearanceTally, appearance: Appearance, index: number): AppearanceTally => {\n    if (appearance.era === ERA.PREQUEL) acc.prequel += 1;\n    if (appearance.era === ERA.ORIGINAL) acc.original += 1;\n    if (appearance.era === ERA.SEQUEL) acc.sequel += 1;\n\n    // is last item\n    if (totalAppearances - 1 === index) {\n      return {\n        prequel: (acc.prequel / totalAppearances) * 100,\n        original: (acc.original / totalAppearances) * 100,\n        sequel: (acc.sequel / totalAppearances) * 100\n      };\n    }\n\n    return acc;\n  }, {\n    prequel: 0,\n    original: 0,\n    sequel: 0\n  });\n\n  // render out a segment per each percent, set each segments width equal to percent\n  const segments = Object.entries(appearancesAsPercents).map(([era, per]) => {\n    // if percent is 0, exclude segment\n    if (!per) return null;\n\n    return (\n      <div\n        key={era}\n        className={`planet-card__era-visualizer__segment planet-card__era-visualizer__segment--${era}`}\n        style={{width: `${per}%`}}\n      />\n    );\n  });\n\n  return (<div className=\"planet-card__era-visualizer\">{segments}</div>);\n};\n\nconst getBriefDescription = (description: string): string => {\n  const modifiedDescription = description.substring(0, 200);\n\n  return description.length > 200\n    ? modifiedDescription.concat('...')\n    : modifiedDescription;\n};\n\nconst renderAppearances = (appearances: Appearance[]): ReactElement => {\n  const filmAppearances = appearancesSortedByEra(appearances, MEDIA.FILM);\n  const tvAppearances = appearancesSortedByEra(\n    appearances,\n    MEDIA.TV\n  );\n\n  const renderAppearance = (appearances: Appearance[]): ReactElement[] =>\n    appearances.map((appearance: Appearance, index: number) => {\n      const { title, year, media, era } = appearance;\n\n      const eraModifier = era.split(' ')[0].toLowerCase();\n      const updatedTitle =\n        title.includes('Clone Wars') && media === MEDIA.TV\n          ? `${title} (${year})`\n          : title;\n\n      return (\n        <li\n          key={`appearance-${index}`}\n          className={`planet-card__appearances__list-item planet-card__appearances__list-item--${eraModifier}`}\n        >\n          {updatedTitle}\n        </li>\n      );\n    });\n\n  return (\n    <div className=\"planet-card__appearances\">\n      {filmAppearances.length ? (\n        <>\n          <h4 className=\"planet-card__appearances__heading\">Film <span role=\"img\" aria-label=\"film\">🎥</span></h4>\n          <ul className=\"planet-card__appearances__list\">\n            {renderAppearance(filmAppearances)}\n          </ul>\n        </>\n      ) : null}\n      {tvAppearances.length ? (\n        <>\n          <h4 className=\"planet-card__appearances__heading\">TV <span role=\"img\" aria-label=\"tv\">📺</span></h4>\n          <ul className=\"planet-card__appearances__list\">\n            {renderAppearance(tvAppearances)}\n          </ul>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nfunction PlanetCard(props: Planet) {\n  const { appearances, name, description } = props;\n\n  return (\n    <div className=\"planet-card\">\n      {renderEraVisualizer(appearances)}\n      <h3 className=\"planet-card__name\">{name}</h3>\n      <p className=\"planet-card__description\">\n        {getBriefDescription(description)}\n      </p>\n      {renderAppearances(appearances)}\n    </div>\n  );\n}\n\nexport default PlanetCard;\n","import React from 'react';\nimport './Loader.scss';\n\nfunction Loader() {\n  return (\n    <div className=\"sk-cube-grid\">\n      <div className=\"sk-cube sk-cube1\"></div>\n      <div className=\"sk-cube sk-cube2\"></div>\n      <div className=\"sk-cube sk-cube3\"></div>\n      <div className=\"sk-cube sk-cube4\"></div>\n      <div className=\"sk-cube sk-cube5\"></div>\n      <div className=\"sk-cube sk-cube6\"></div>\n      <div className=\"sk-cube sk-cube7\"></div>\n      <div className=\"sk-cube sk-cube8\"></div>\n      <div className=\"sk-cube sk-cube9\"></div>\n    </div>\n  );\n}\n\nexport default Loader;","import React, { useState, useEffect } from 'react';\nimport { fetchData, overlap, search, unique } from '../../utils';\nimport { Appearance, Filters, Planet } from '../../models/ui';\nimport { ERA, MEDIA } from '../../constants';\nimport PlanetCard from './PlanetCard';\nimport Loader from '../Loader/Loader';\nimport mockData from '../../mockData/planets.json';\n\nexport interface PlanetCardsProps {\n  filters: Filters;\n}\n\nconst filterAppearancesByCanon = (\n  appearances: Appearance[]\n): Appearance[] =>\n  appearances.filter(\n    ({ title }) =>\n      title !== 'Star Wars: The Clone Wars' &&\n      title !== 'Star Wars Resistance' &&\n      !title.startsWith('Episode VII') &&\n      !title.startsWith('Episode VIII') &&\n      !title.startsWith('Episode IX')\n  );\n\nconst filterAppearancesByMedia = (appearances: Appearance[], media: string): Appearance[] => appearances.filter(appearance => {\n    if (media === MEDIA.EPISODES) {\n      return appearance.media === MEDIA.FILM && appearance.title.includes('Episode')\n    }\n    if (media === MEDIA.SPINOFFS) {\n      return appearance.media === MEDIA.FILM && !appearance.title.includes('Episode')\n    }\n    \n    return appearance.media === media;\n  });\n\nconst filterBySearchQuery = (planets: Planet[], filters: Filters): Planet[] => {\n  if (!filters.searchQuery.length) return planets;\n\n  return planets.filter(({ name }: Planet) =>\n    search(filters.searchQuery, name)\n  );\n};\n\nconst filterByMyCanon = (planets: Planet[], filters: Filters): Planet[] => {\n  if (!filters.myCanon) return planets;\n\n  return planets.reduce((acc: Planet[], planet: Planet) => {\n    const modifiedAppearances: Appearance[] = filterAppearancesByCanon(\n      planet.appearances\n    );\n\n    /**\n     * after filtering out non-canon appearances, if there are any left\n     * add that planet to the array of new planets\n     * and update that planet's appearances with the filtered appearances\n     * else skip/exclude the current planet from the array of new planets\n     */\n    if (modifiedAppearances.length) {\n      acc.push({\n        ...planet,\n        appearances: modifiedAppearances\n      });\n    }\n\n    return acc;\n  }, []);\n};\n\nconst filterByEra = (planets: Planet[], filters: Filters): Planet[] => {\n  if (!filters.era.length || filters.era.length === Object.values(ERA).length) return planets;\n\n  return planets.filter((planet: Planet) => {\n    const eras: string[] = planet.appearances.map(\n      ({ era }: Appearance) => era\n    );\n\n    // return overlap(filters.era, eras);\n    return overlap(eras, filters.era);\n  });\n};\n\nconst filterByMedia = (planets: Planet[], filters: Filters): Planet[] => {\n  if (filters.media === MEDIA.ALL) return planets;\n\n  // if some eras but not all eras are selected, crossReference by selected eras\n  const crossReferenceByEras = filters.era.length && filters.era.length < Object.values(ERA).length;\n\n  return planets.reduce((acc: Planet[], planet: Planet) => {\n    const filteredAppearances = filterAppearancesByMedia(planet.appearances, filters.media);\n    \n    // if cross referencing\n    if (crossReferenceByEras) {\n      const eras = unique(filteredAppearances.map(({ era }) => era));\n      const erasOverlapFilters = overlap(eras, filters.era);\n\n      // AND planet has appearances that match selected media AND eras overlap selected eras\n      if (filteredAppearances.length && erasOverlapFilters) {\n        acc.push(planet);\n      }\n    }\n    // if NOT cross referencing \n    else {\n      // AND planet has appearances that match selected media\n      if (filteredAppearances.length) {\n        acc.push(planet);\n      }\n    }\n\n    return acc;\n  }, []);\n};\n\n// iteratively filter all of the planets based on the filters applied\nconst getFilteredPlanets = (planets: Planet[], filters: Filters): Planet[] =>\n  [\n    filterBySearchQuery,\n    filterByMyCanon,\n    filterByEra,\n    filterByMedia\n  ].reduce(\n    (newPlanetsArray: Planet[], currentFilterFunction: Function) =>\n      currentFilterFunction(newPlanetsArray, filters),\n    planets\n  );\n\nfunction PlanetCards(props: PlanetCardsProps) {\n  const [initialPlanets, setInitialPlanets] = useState([]);\n\n  const filteredPlanets = initialPlanets.length ? getFilteredPlanets(initialPlanets, props.filters) : initialPlanets;\n\n  useEffect(() => {\n    fetchData(setInitialPlanets, mockData);\n  }, []);\n\n  // if there are no filtered planets\n  if (!filteredPlanets.length) {\n    /**\n     * if there are initial planets (i.e. the data was loaded),\n     * display a message related to the filters and not being able to find any matching planets\n     * else, display a loading message\n     */\n    const content = initialPlanets.length ? (\n      <p className=\"planet-cards__message\">\n        Sorry, no planets match the filters you've selected.\n      </p>\n    ) : (\n      <>\n        <Loader />\n        <p className=\"planet-cards__message\">\n          Loading...\n        </p>\n      </>\n    );\n\n    return (\n      <div className=\"planet-cards planet-cards--no-data\">\n        {content}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"planet-cards\">\n      {filteredPlanets.map((planet: Planet) => (\n        <PlanetCard key={`planet-${planet.id}`} {...planet} />\n      ))}\n    </div>\n  );\n}\n\nexport default PlanetCards;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Filters } from './models/ui';\nimport { ERA, MEDIA } from './constants';\nimport Header from './components/Header/Header';\nimport FilterBar from './components/FilterBar/FilterBar';\nimport PlanetCards from './components/PlanetCards/PlanetCards';\n\nfunction App() {\n  // SETUP FILTERS AND FORM\n  const defaultValues: Filters = {\n    searchQuery: '',\n    media: MEDIA.ALL,\n    era: [\n      ...Object.values(ERA)\n    ],\n    myCanon: false\n  };\n\n  const methods = useForm({ defaultValues });\n\n  const watchAll = methods.watch() as Filters;\n  const filters: Filters = Object.keys(watchAll).length\n    ? watchAll\n    : defaultValues;\n\n\n  return (\n    <div className=\"star-wars-planets-app\">\n      <Header />\n      <FilterBar {...methods} />\n      <PlanetCards filters={filters} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void,\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}