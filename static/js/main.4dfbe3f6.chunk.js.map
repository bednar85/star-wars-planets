{"version":3,"sources":["assets/imgs/star-wars-logo-yellow.png","constants.ts","components/Header/Header.tsx","utils/index.ts","components/FilterBar/FilterBar.tsx","components/PlanetCards/PlanetCard.tsx","components/Loader/Loader.tsx","components/PlanetCards/PlanetCards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FILTER_KEY","MEDIA","ALL","FILM","EPISODES","SPINOFFS","TV","ERA","PREQUEL","ORIGINAL","SEQUEL","Header","className","src","logo","alt","href","target","rel","overlap","needles","haystack","some","needle","includes","delayedMockFetch","ms","value","Promise","resolve","setTimeout","fetchData","setDataCallback","mockData","a","min","max","Math","ceil","floor","delay","random","data","FilterBar","register","renderInputs","type","name","labels","map","label","index","formFieldId","toLowerCase","replace","trim","displayLabel","getDisplayLabel","subsetClass","key","id","ref","htmlFor","Object","values","appearancesSortedByEra","appearances","targetMedia","appearancesByMedia","filter","appearance","media","prequelAppearances","era","originalAppearances","sequelAppearances","PlanetCard","description","totalAppearances","length","appearancesAsPercents","reduce","acc","Prequel","Original","Sequel","console","log","segments","entries","perc","style","width","renderEraBar","modifiedDescription","substring","concat","getBriefDescription","filmAppearances","tvAppearances","renderAppearanceList","categoryHeading","title","year","eraModifier","split","updatedTitle","renderAppearances","Loader","filterBySearchQuery","planets","searchQuery","substr","filterByMyCanon","myCanon","planet","modifiedAppearances","startsWith","push","filterByEra","filters","eras","filterByMedia","crossReferenceByEras","selectedMedia","arr","filteredAppearances","Array","from","Set","erasOverlapFilters","PlanetCards","useState","initialPlanets","setInitialPlanets","filteredPlanets","newPlanetsArray","currentFilterFunction","getFilteredPlanets","useEffect","content","App","defaultValues","useForm","watch","watchAll","keys","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4dfbe3f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-logo-yellow.9b7050e5.png\";","import { Era, Media } from './models/ui';\n\nexport const FILTER_KEY = {\n  MEDIA: 'media',\n  ERA: 'era',\n  MY_CANON: 'myCanon'\n};\n\nexport const MEDIA: {\n  [x: string]: Media;\n} = {\n  ALL: 'All',\n  FILM: 'Film',\n  EPISODES: 'Episodes',\n  SPINOFFS: 'Spinoffs',\n  TV: 'TV Series'\n};\n\nexport const ERA: {\n  [x: string]: Era;\n} = {\n  PREQUEL: 'Prequel',\n  ORIGINAL: 'Original',\n  SEQUEL: 'Sequel'\n};\n","import React, { ReactElement } from 'react';\n\nimport logo from 'assets/imgs/star-wars-logo-yellow.png';\n\nconst Header = (): ReactElement => (\n  <header className=\"header\">\n    <img className=\"app-logo\" src={logo} alt=\"Star Wars\" />\n    <span className=\"image-attribution\">\n      Illustration by{' '}\n      <a\n        href=\"https://www.artstation.com/pabloolivera\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        Pablo Olivera\n      </a>\n    </span>\n  </header>\n);\n\nexport default Header;\n","export const unique = (arr: (string | number)[]): (string | number)[] =>\n  Array.from(new Set(arr));\n\n/**\n * Search to see if any of the items of array1 are in array2.\n *\n * @param {array} needles - the array which has the items you are searching for\n * @param {array} haystack - the array that you are searching in\n * @return {boolean} true any of the items in array are in the haystack\n */\nexport const overlap = (\n  needles: (string | number)[],\n  haystack: (string | number)[]\n): boolean => needles.some(needle => haystack.includes(needle));\n\n/**\n * Search for substring in string.\n *\n * @param {string} substring - the substring that you are trying to find a match for\n * @param {string} string - the full string that you are searching\n * @return {boolean} true if the substring is a full or partial match\n */\nexport const search = (substr: string, str: string): boolean => {\n  return str.toLowerCase().includes(substr.toLowerCase());\n};\n\nexport const getRandomIntInclusive = (min: number, max: number): number => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const delayedMockFetch = (ms: number, value: any): Promise<any> => {\n  return new Promise(resolve => setTimeout(resolve, ms, value));\n};\n\nexport const fetchData = async (\n  setDataCallback: (data: any) => void,\n  mockData: any\n): Promise<void> => {\n  // simulate a delay in loading of the data\n  const delay = getRandomIntInclusive(1000, 3000);\n  const data = await delayedMockFetch(delay, mockData);\n\n  setDataCallback(data);\n};\n\nexport const toKebabCase = (str: string): string =>\n  str\n    .toLowerCase()\n    .replace(/[^a-zA-Z']/gi, ' ')\n    .trim()\n    .replace(/\\s+/g, '-');\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ERA, FILTER_KEY, MEDIA } from '../../constants';\nimport { toKebabCase } from '../../utils';\n\ninterface Input {\n  type: string;\n  name: string;\n  labels: string[];\n}\n\ninterface FilterBarProps {\n  register: ReturnType<typeof useForm>['register'];\n}\n\nconst getDisplayLabel = (label: string) => {\n  if (label === MEDIA.ALL) return `${MEDIA.ALL} – 🎥 📺`;\n  if (label === MEDIA.FILM) return `${MEDIA.FILM} – 🎥`;\n  if (label === MEDIA.EPISODES) return `${MEDIA.EPISODES}`;\n  if (label === MEDIA.SPINOFFS) return `${MEDIA.SPINOFFS}`;\n  if (label === MEDIA.TV) return `${MEDIA.TV} – 📺`;\n\n  return label;\n};\n\nconst FilterBar: FunctionComponent<FilterBarProps> = ({\n  register\n}: FilterBarProps): ReactElement => {\n  const renderInputs = ({ type, name, labels }: Input): ReactElement[] =>\n    labels.map((label: string, index: number) => {\n      const formFieldId: string = toKebabCase(label);\n      const displayLabel = getDisplayLabel(label);\n      const subsetClass =\n        label === MEDIA.EPISODES || label === MEDIA.SPINOFFS\n          ? 'filter-form__input-wrapper--subset'\n          : '';\n\n      return (\n        <div\n          key={`filter-form__input-${index}`}\n          className={`filter-form__input-wrapper ${subsetClass}`}\n        >\n          <input\n            type={type}\n            className=\"filter-form__input\"\n            id={`${name}-${formFieldId}`}\n            name={name}\n            value={label}\n            ref={register}\n          />\n          <label\n            className=\"filter-form__label\"\n            htmlFor={`${name}-${formFieldId}`}\n          >\n            {displayLabel}\n          </label>\n        </div>\n      );\n    });\n\n  return (\n    <form className=\"filter-form\">\n      <input\n        type=\"text\"\n        name=\"searchQuery\"\n        className=\"search-form-input\"\n        ref={register}\n      />\n      <fieldset className=\"filter-form__fieldset\">\n        <h2 className=\"filter-form__heading\">Media</h2>\n        {renderInputs({\n          type: 'radio',\n          name: FILTER_KEY.MEDIA,\n          labels: [...Object.values(MEDIA)]\n        })}\n      </fieldset>\n      <fieldset className=\"filter-form__fieldset\">\n        <h2 className=\"filter-form__heading\">Era</h2>\n        {renderInputs({\n          type: 'checkbox',\n          name: FILTER_KEY.ERA,\n          labels: [...Object.values(ERA)]\n        })}\n      </fieldset>\n      <fieldset className=\"filter-form__fieldset\">\n        <h2 className=\"filter-form__heading\">Canon</h2>\n        <div className=\"filter-form__input-wrapper\">\n          <input\n            type=\"checkbox\"\n            className=\"filter-form__input\"\n            id={FILTER_KEY.MY_CANON}\n            name={FILTER_KEY.MY_CANON}\n            ref={register}\n          />\n          <label className=\"filter-form__label\" htmlFor={FILTER_KEY.MY_CANON}>\n            My Canon\n          </label>\n        </div>\n      </fieldset>\n    </form>\n  );\n};\n\nexport default FilterBar;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { Appearance, Media, Planet } from '../../models/ui';\nimport { ERA, MEDIA } from '../../constants';\n\ntype AppearanceTally = {\n  Prequel: number;\n  Original: number;\n  Sequel: number;\n};\n\nconst appearancesSortedByEra = (\n  appearances: Appearance[],\n  targetMedia: Media\n): Appearance[] => {\n  const appearancesByMedia = targetMedia\n    ? appearances.filter(appearance => appearance.media === targetMedia)\n    : appearances;\n\n  const prequelAppearances = appearancesByMedia.filter(\n    appearance => appearance.era === ERA.PREQUEL\n  );\n  const originalAppearances = appearancesByMedia.filter(\n    appearance => appearance.era === ERA.ORIGINAL\n  );\n  const sequelAppearances = appearancesByMedia.filter(\n    appearance => appearance.era === ERA.SEQUEL\n  );\n\n  return [...prequelAppearances, ...originalAppearances, ...sequelAppearances];\n};\n\nconst renderEraBar = (appearances: Appearance[]): ReactElement => {\n  const totalAppearances = appearances.length;\n\n  /**\n   * tally up all appearances by era\n   * on final item, convert tally to percents\n   */\n  const appearancesAsPercents = appearances.reduce(\n    (\n      acc: AppearanceTally,\n      { era }: Appearance,\n      index: number\n    ): AppearanceTally => {\n      // increment the tally based on the current appearance's era\n      acc[era] += 1;\n\n      // if it's the final appearance in the appearances array\n      if (totalAppearances - 1 === index) {\n        return {\n          Prequel: (acc.Prequel / totalAppearances) * 100,\n          Original: (acc.Original / totalAppearances) * 100,\n          Sequel: (acc.Sequel / totalAppearances) * 100\n        };\n      }\n\n      return acc;\n    },\n    {\n      Prequel: 0,\n      Original: 0,\n      Sequel: 0\n    }\n  );\n\n  console.log('');\n  console.log('FILENAME - METHOD');\n  console.log('  appearancesAsPercents:', appearancesAsPercents);\n\n  // render out a segment per each percent, set each segments width equal to percent\n  const segments = Object.entries(appearancesAsPercents).map(([era, perc]) => {\n    // if percent is 0, exclude segment\n    if (!perc) return null;\n\n    return (\n      <div\n        key={era}\n        className={`planet-card__era-bar__segment planet-card__era-bar__segment--${era.toLowerCase()}`}\n        style={{ width: `${perc}%` }}\n      />\n    );\n  });\n\n  return <div className=\"planet-card__era-bar\">{segments}</div>;\n};\n\nconst getBriefDescription = (description: string): string => {\n  const modifiedDescription = description.substring(0, 200);\n\n  return description.length > 200\n    ? modifiedDescription.concat('...')\n    : modifiedDescription;\n};\n\nconst renderAppearances = (appearances: Appearance[]): ReactElement => {\n  const filmAppearances = appearancesSortedByEra(appearances, MEDIA.FILM);\n  const tvAppearances = appearancesSortedByEra(appearances, MEDIA.TV);\n\n  const renderAppearanceList = (\n    appearances: Appearance[],\n    categoryHeading: string\n  ): ReactElement => (\n    <>\n      <h4 className=\"planet-card__appearances__heading\">{categoryHeading}</h4>\n      <ul className=\"planet-card__appearances__list\">\n        {appearances.map(\n          (\n            { title, year, media, era }: Appearance,\n            index: number\n          ): ReactElement => {\n            const eraModifier = era.split(' ')[0].toLowerCase();\n            const updatedTitle =\n              title.includes('Clone Wars') && media === MEDIA.TV\n                ? `${title} (${year})`\n                : title;\n\n            return (\n              <li\n                key={`appearance-${index}`}\n                className={`planet-card__appearances__list-item planet-card__appearances__list-item--${eraModifier}`}\n              >\n                {updatedTitle}\n              </li>\n            );\n          }\n        )}\n      </ul>\n    </>\n  );\n\n  // there will always be at least one appearance/group\n  return (\n    <div className=\"planet-card__appearances\">\n      {filmAppearances.length\n        ? renderAppearanceList(filmAppearances, 'Film 🎥')\n        : null}\n      {tvAppearances.length\n        ? renderAppearanceList(tvAppearances, 'TV 📺')\n        : null}\n    </div>\n  );\n};\n\nconst PlanetCard: FunctionComponent<Planet> = ({\n  appearances,\n  name,\n  description\n}: Planet): ReactElement => (\n  <div className=\"planet-card\">\n    {renderEraBar(appearances)}\n    <h3 className=\"planet-card__name\">{name}</h3>\n    <p className=\"planet-card__description\">\n      {getBriefDescription(description)}\n    </p>\n    {renderAppearances(appearances)}\n  </div>\n);\n\nexport default PlanetCard;\n","import React, { ReactElement } from 'react';\nimport './Loader.scss';\n\nfunction Loader(): ReactElement {\n  return (\n    <div className=\"sk-cube-grid\">\n      <div className=\"sk-cube sk-cube1\"></div>\n      <div className=\"sk-cube sk-cube2\"></div>\n      <div className=\"sk-cube sk-cube3\"></div>\n      <div className=\"sk-cube sk-cube4\"></div>\n      <div className=\"sk-cube sk-cube5\"></div>\n      <div className=\"sk-cube sk-cube6\"></div>\n      <div className=\"sk-cube sk-cube7\"></div>\n      <div className=\"sk-cube sk-cube8\"></div>\n      <div className=\"sk-cube sk-cube9\"></div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import React, {\n  FunctionComponent,\n  ReactElement,\n  useState,\n  useEffect\n} from 'react';\nimport { fetchData, overlap, search, unique } from '../../utils';\nimport { Appearance, Filters, Media, Planet } from '../../models/ui';\nimport { ERA, MEDIA } from '../../constants';\nimport PlanetCard from './PlanetCard';\nimport Loader from '../Loader/Loader';\nimport mockData from '../../mockData/planets.json';\n\ninterface PlanetCardsProps {\n  filters: Filters;\n}\n\ntype AppearancesFilterFunction = (\n  appearances: Appearance[],\n  selectedMedia?: Media\n) => Appearance[];\ntype PlanetsFilterFunction = (planets: Planet[], filters: Filters) => Planet[];\n\nconst filterAppearancesByCanon: AppearancesFilterFunction = appearances =>\n  appearances.filter(\n    ({ title }) =>\n      title !== 'Star Wars: The Clone Wars' &&\n      title !== 'Star Wars Resistance' &&\n      !title.startsWith('Episode VII') &&\n      !title.startsWith('Episode VIII') &&\n      !title.startsWith('Episode IX')\n  );\n\nconst filterAppearancesByMedia: AppearancesFilterFunction = (\n  appearances,\n  selectedMedia\n) =>\n  appearances.filter(({ media, title }) => {\n    if (selectedMedia === MEDIA.EPISODES) {\n      return media === MEDIA.FILM && title.includes('Episode');\n    }\n    if (selectedMedia === MEDIA.SPINOFFS) {\n      return media === MEDIA.FILM && !title.includes('Episode');\n    }\n\n    return media === selectedMedia;\n  });\n\nconst filterBySearchQuery: PlanetsFilterFunction = (\n  planets,\n  { searchQuery }\n) => {\n  if (!searchQuery.length) return planets;\n\n  return planets.filter(({ name }: Planet) => search(searchQuery, name));\n};\n\nconst filterByMyCanon: PlanetsFilterFunction = (planets, { myCanon }) => {\n  if (!myCanon) return planets;\n\n  return planets.reduce((acc: Planet[], planet: Planet) => {\n    const modifiedAppearances: Appearance[] = filterAppearancesByCanon(\n      planet.appearances\n    );\n\n    /**\n     * after filtering out non-canon appearances, if there are any left\n     * add that planet to the array of new planets\n     * and update that planet's appearances with the filtered appearances\n     * else skip/exclude the current planet from the array of new planets\n     */\n    if (modifiedAppearances.length) {\n      acc.push({\n        ...planet,\n        appearances: modifiedAppearances\n      });\n    }\n\n    return acc;\n  }, []);\n};\n\nconst filterByEra: PlanetsFilterFunction = (planets, filters) => {\n  if (!filters.era.length || filters.era.length === Object.values(ERA).length) {\n    return planets;\n  }\n\n  return planets.filter((planet: Planet) => {\n    const eras: string[] = planet.appearances.map(({ era }) => era);\n\n    return overlap(eras, filters.era);\n  });\n};\n\nconst filterByMedia: PlanetsFilterFunction = (planets, filters) => {\n  if (filters.media === MEDIA.ALL) return planets;\n\n  // if some eras but not all eras are selected, crossReference by selected eras\n  const crossReferenceByEras =\n    filters.era.length && filters.era.length < Object.values(ERA).length;\n\n  return planets.reduce((acc: Planet[], planet: Planet) => {\n    const filteredAppearances = filterAppearancesByMedia(\n      planet.appearances,\n      filters.media\n    );\n\n    // if cross referencing\n    if (crossReferenceByEras) {\n      const eras = unique(filteredAppearances.map(({ era }) => era));\n      const erasOverlapFilters = overlap(eras, filters.era);\n      // AND planet has appearances that match selected media AND eras overlap selected eras\n      if (filteredAppearances.length && erasOverlapFilters) {\n        acc.push(planet);\n      }\n    }\n    // if NOT cross referencing\n    else {\n      // AND planet has appearances that match selected media\n      if (filteredAppearances.length) {\n        acc.push(planet);\n      }\n    }\n\n    return acc;\n  }, []);\n};\n\n// iteratively filter all of the planets based on the filters applied\nconst getFilteredPlanets: PlanetsFilterFunction = (planets, filters) =>\n  // prettier-ignore\n  [\n    filterBySearchQuery,\n    filterByMyCanon,\n    filterByEra,\n    filterByMedia\n  ].reduce(\n    (newPlanetsArray, currentFilterFunction) =>\n      currentFilterFunction(newPlanetsArray, filters),\n    planets\n  );\n\nconst PlanetCards: FunctionComponent<PlanetCardsProps> = ({\n  filters\n}: PlanetCardsProps): ReactElement => {\n  const [initialPlanets, setInitialPlanets] = useState([]);\n\n  const filteredPlanets = initialPlanets.length\n    ? getFilteredPlanets(initialPlanets, filters)\n    : initialPlanets;\n\n  useEffect(() => {\n    fetchData(setInitialPlanets, mockData);\n  }, []);\n\n  // if there are no filtered planets\n  if (!filteredPlanets.length) {\n    /**\n     * if there are initial planets (i.e. the data was loaded),\n     * display a message related to the filters and not being able to find any matching planets\n     * else, display a loading message\n     */\n    // move loading message into Loader\n    // consider using Suspense to render Loader\n    const content = initialPlanets.length ? (\n      <p className=\"planet-cards__message\">\n        Sorry, no planets match the filters you&apos;ve selected.\n      </p>\n    ) : (\n      <>\n        <Loader />\n        <p className=\"planet-cards__message\">Loading...</p>\n      </>\n    );\n\n    return <div className=\"planet-cards planet-cards--no-data\">{content}</div>;\n  }\n\n  return (\n    <div className=\"planet-cards\">\n      {filteredPlanets.map((planet: Planet) => (\n        <PlanetCard key={`planet-${planet.id}`} {...planet} />\n      ))}\n    </div>\n  );\n};\n\nexport default PlanetCards;\n","import React, { ReactElement } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Filters } from './models/ui';\nimport { ERA, MEDIA } from './constants';\nimport Header from './components/Header/Header';\nimport FilterBar from './components/FilterBar/FilterBar';\nimport PlanetCards from './components/PlanetCards/PlanetCards';\n\nconst App = (): ReactElement => {\n  // SETUP FILTERS AND FORM\n  // const defaultValues: Filters = {\n  //   searchQuery: '',\n  //   media: MEDIA.ALL,\n  //   era: [...Object.values(ERA)],\n  //   myCanon: false\n  // };\n  const defaultValues: Filters = {\n    searchQuery: '',\n    media: MEDIA.EPISODES,\n    era: [ERA.ORIGINAL],\n    myCanon: false\n  };\n\n  const { watch, register } = useForm({ defaultValues });\n\n  const watchAll = watch() as Filters;\n  const filters: Filters = Object.keys(watchAll).length\n    ? watchAll\n    : defaultValues;\n\n  // X - move all of this filtering logic into planet cards\n  // X - update this so that App contains the form state\n  // X - FilterBar updates it\n  // X - and PlanetCards watches it\n  // X - update classNames used throughout, so it includes underscores and is MORE BEM\n  // X - animated loading indicator?\n  // X - decrease font-size of description and appearances\n  // X - consider changing default font\n  // X - add logic to handle spin offs only\n  // X - divide up SCSS file into smaller ones per component\n\n  // setup relative paths\n\n  // add label above search box\n\n  // oh yeah those star wars helmet icons for the eras\n\n  // add the fish thing at the bottom of middle of the page\n\n  // try setting up a JSON-Server in the root of this app to serve up the planets JSON data, can modify that later to make it more real\n\n  // back to top button\n\n  return (\n    <div className=\"star-wars-planets-app\">\n      <Header />\n      <FilterBar register={register} />\n      <PlanetCards filters={filters} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}